name: "Golang application Build & Publish"

on:
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # go version
  GO_VERSION: 1.19

jobs:
  ra_version:
    permissions:
      packages: write
      actions: read
      contents: write

    name: "Generate versions from common workflow"
    # uses: "Rockwell-Automation-FTDS/configuration-cd/.github/workflows/raver.yml@1.3.3"
    uses: "./.github/workflows/raver.yml"

  run-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get absolute path
        id: path
        run: echo "ABSOLUTE_PATH=$(pwd)" >> $GITHUB_ENV
      - name: Build and Test project
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          file: ./DockerfileTest
          tags: golangtest:latest
          load: true
          build-args: |
            GO_ALPINE_VERSION=1.20.2-alpine3.17
      - name: Test
        run: |
          docker run -v ${{ env.ABSOLUTE_PATH }}:/go/testdir golangtest:latest
          ls
      - name: Quality Gate - Test coverage shall be above threshold
        env:
          TESTCOVERAGE_THRESHOLD: 85
        run: |
            echo "Quality Gate: checking test coverage is above threshold ..."
            echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
            totalCoverage=`go tool cover -func=cover.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
            echo "Current test coverage : $totalCoverage %"
            if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 > $2)}') )); then
                echo "OK"
            else
                echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
                echo "Failed"
                exit 1
            fi
      - name: Upload tests file
        uses: actions/upload-artifact@v3
        with: 
          name: cover.out
          path:
            cover.out

  build-image:
    name: Build Image
    needs: [ra_version] #[ra_version,run-unit-tests]
    runs-on: ubuntu-latest

    permissions:
      packages: write
      actions: read
      contents: write          # for actions/checkout to fetch code
      pull-requests: write
      security-events: write  # for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Cosign
        uses: sigstore/cosign-installer@main
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Create Docker context
        run: |
          docker context create ftds
          docker context use ftds
          unset DOCKER_HOST
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: ftds
        env:
          DOCKER_CONTEXT: ftds
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DH_USERNAME }}
          password: ${{ secrets.DH_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ripa1986/golangdemo
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ needs.ra_version.outputs.version }}
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
     
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          file: ./Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_ALPINE_VERSION=1.20.2-alpine3.17
      - name: Publish Helm chart to GHCR
        run: |
          helm package charts/golang --version ${{ needs.ra_version.outputs.chart_version }}
          helm push golang-demo-${{ needs.ra_version.outputs.chart_version }}.tgz oci://ghcr.io/ripa-grig/charts
          rm golang-demo-${{ needs.ra_version.outputs.chart_version }}.tgz
      - uses: azure/setup-kubectl@v3

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "gha-cluster"
          args: >-
            -p "8083:80@agent:0:direct"
            -p "8443:443@agent:0:direct"
            -p "5053:53/udp@agent:0:direct"
            --agents 1
            --image docker.io/rancher/k3s:v1.24.12-k3s1
            --k3s-arg "--no-deploy=traefik,metrics-server@server:*"

      - name: k3d test environment
        run: |
          kubectl get all -A
          kubectl create namespace golang-system
          kubectl create secret docker-registry ra-creg -n golang-system \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_TOKEN }}
            helm upgrade --install golang-demo -n golang-system  oci://ghcr.io/ripa-grig/charts/golang-demo \
            --version ${{ needs.ra_version.outputs.chart_version }} \
            --set image.repository=ghcr.io/ripa-grig/golang-demo \
            --set image.tag=${{ needs.ra_version.outputs.version }} 
          sleep 20
          kubectl get all -A
          kubectl describe deployment golang-demo -n golang-system
          kubectl get pods -n golang-system
          kubectl get secrets -n golang-system
      - name: Check deployment status
        run: |
          podname=`kubectl get pods -n golang-system  | grep golang-demo | awk '{ print $1 }'`
          avpods=`kubectl get pods -n golang-system  | grep golang-demo | awk '{ print $2 }'`
          up=`echo $avpods | awk '{split($0, out, "/"); print (out[1] == out[2])}'`
          echo "POD: $avpods"
          echo "UP: $up"
          tries=5
          attempt=0
          while [ $up -eq 0 -a $tries -gt $attempt ]; do
            up=`echo $avpods | awk '{split($0, out, "/"); print (out[1] == out[2])}'`
            echo "UP: $up"
            attempt=$((attempt + 1))
            sleep 10
            kubectl get pods -n golang-system
          done

          if [ $up -eq 0 ]; then
            echo "pod is not ready"
          else
            echo "pod is ready"
            kubectl logs -n golang-system $podname
          fi

          helm uninstall golang-demo -n golang-system
      - name: Create tag and push
        if:  github.ref_name == 'main'
        run: |
          rc=0
          git show-ref --tags ${{ needs.ra_version.outputs.version }} --quiet || rc="$?"
          if  [ $rc -eq 0 ]; then
            echo "App no changes, skip tagging ${{ needs.ra_version.outputs.version }}"
          else
            echo "App changed , pushing new version ${{ needs.ra_version.outputs.version }} "
            git tag ${{ needs.ra_version.outputs.version }} && git push --tags
          fi
